以数组[2,3,5,1,0,7,4]举例
假设有一个栈: <........>
第一步：取出i=0的元素2
第一步很简单，没有任何操作，直接入栈，此时栈变为: <......2>

第二步：取出i=1的元素3
此时，判断这一步取出的元素3是否大于栈中的元素2，3>2，所以，栈中的2弹出，3压入，栈变为: <......3>
这一步一开始看的时候容易不懂，实际上这一步放到代码中就是判断若大于，则map.put(2, 3);表示2后面一个比他大的数为3。

第三步：取出i=2的元素5
同第二步，发现5>3，则3从栈中弹出，5压入，栈变为: <......5>
同时这一步的时候map.put(3, 5);

第四步：取出i=3的元素1
此时发现，1<5，那么栈不弹出，栈中压入1，栈就变成: <....1, 5>

第五步：取出i=4的元素0
同上，0<1，栈中压入0，栈变为: <...0, 1, 5>

第六步：取出i=5的元素7
此时发现，这一步就很关键了，7>0，同第一、第二步，0从栈中弹出，同时map.put(0, 7);
与此同时我们发现此时，7仍然比此时栈顶的1大，所以1也从栈顶弹出，同时map.put(1, 7);
再进一步，还剩一个5，7仍然大于5，所以5也弹出，同时map.put(5, 7);

到这里整个逻辑实际就很清楚了。此时栈中存在的数为7，
map中为：
[2,3]
[3,5]
[0,7]
[1,7]
[5,7]
所以，上面的步骤中，没有弹出，则说明该数没有遇到比他大的数，所以一直留存在栈中，一旦遇到比他大的，则会按顺序一个个弹出并put到map中。


